# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
meh - j : yabai -m window --focus prev || yabai -m window --focus last; yabai -m window --focus stack.prev || yabai -m window --focus stack.last
meh - k : yabai -m window --focus next || yabai -m window --focus first; yabai -m window --focus stack.next || yabai -m window --focus stack.first
# meh - h : yabai -m window --focus west
# meh - j : yabai -m window --focus south
# meh - k : yabai -m window --focus north
# meh - l : yabai -m window --focus east
# cycle through tiled windows (fn + cmd - ` AND fn - `)
# meh + cmd - 0x32 : yabai -m window --focus prev || yabai -m window --focus last
# meh - 0x32 : yabai -m window --focus next || yabai -m window --focus first

# launch apps
# meh - q : open -a /Applications/Mail.app
# meh - w : open -a /Applications/Messages.app
# meh - e : open -a /Applications/Messenger.app
# meh - r : open -a /Applications/Discord.app
# meh - a : open -an /Applications/Finder.app
# meh - s : open -a /Applications/Alacritty.app
# meh - d : open -a /Applications/Visual\ Studio\ Code.app
# meh - f : open -a /Applications/Google\ Chrome.app
# meh - z : open -a /Applications/Spotify.app
# meh - x : open -a /Applications/Notion.app
# meh - c : open -a /Applications/Calendar.app
# meh - v : open -a /Applications/Todoist.app

# cycle through all windows in current space
# https://github.com/koekeishiya/yabai/issues/113
# fn - p: index="$(yabai -m query --spaces | jq -c '.[] | select( .focused == 1).index')" && \
         # yabai -m window --focus "$(yabai -m query --windows --space $index | jq -re "sort_by(.display, .frame.x, .frame.y, .id) | map(select(.visible == 1 and .subrole != \"AXUnknown\")) | nth(index(map(select(.focused == 1))) - 1).id")"
# fn - n : index="$(yabai -m query --spaces | jq -c '.[] | select( .focused == 1).index')" && \
          # yabai -m window --focus "$(yabai -m query --windows --space $index | jq -re "sort_by(.display, .frame.x, .frame.y, .id) | map(select(.visible == 1 and .subrole != \"AXUnknown\")) | reverse | nth(index(map(select(.focused == 1))) - 1).id")"

# swap managed window
hyper - j : yabai -m window --swap prev || yabai -m window --swap last
hyper - k : yabai -m window --swap next || yabai -m window --swap first
# hyper - h : yabai -m window --swap west
# hyper - j : yabai -m window --swap south
# hyper - k : yabai -m window --swap north
# hyper - l : yabai -m window --swap east

# move managed window
# ctrl + fn - h : yabai -m window --warp west
# ctrl + fn - j : yabai -m window --warp south
# ctrl + fn - k : yabai -m window --warp north
# ctrl + fn - l : yabai -m window --warp east

# balance size of windows (meh + ')
meh - 0x27 : yabai -m space --balance

# make floating window fill screen
# meh - m       : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + alt - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# fast focus desktop
alt - tab : yabai -m space --focus recent

# create desktop and focus that one
# shift + alt - n : yabai -m space --create && \
                  # index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                  # yabai -m space --focus "${index}"

# destroy focus desktop
# shift + alt - x : yabai -m space --destroy

# cmd + alt - 1 : yabai -m space --focus 1
# ctrl + left : yabai -m space --focus prev
# ctrl + right : yabai -m space --focus next

# shift + alt - 9 : yabai -m space --focus prev || yabai -m space --focus last
# shift + alt - 0 : yabai -m space --focus next || yabai -m space --focus first

# send window to space and follow focus
hyper - h : yabai -m window --space prev; yabai -m space --focus prev
hyper - l : yabai -m window --space next; yabai -m space --focus next

hyper - 1 : yabai -m window --space  1; yabai -m space --focus 1
hyper - 2 : yabai -m window --space  2; yabai -m space --focus 2
hyper - 3 : yabai -m window --space  3; yabai -m space --focus 3
hyper - 4 : yabai -m window --space  4; yabai -m space --focus 4
hyper - 5 : yabai -m window --space  5; yabai -m space --focus 5
hyper - 6 : yabai -m window --space  6; yabai -m space --focus 6

# focus space
meh - h : yabai -m space --focus prev
meh - l : yabai -m space --focus next

meh - 1 : yabai -m space --focus 1
meh - 2 : yabai -m space --focus 2
meh - 3 : yabai -m space --focus 3
meh - 4 : yabai -m space --focus 4
meh - 5 : yabai -m space --focus 5
meh - 6 : yabai -m space --focus 6

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# alt - [
# alt - ]
# alt - 0x21 : yabai -m window --resize left:-50:0
# alt - 0x1E : yabai -m window --resize left:50:0

# shift + alt - [
# shift + alt - ]
# shift + alt - 0x21 : yabai -m window --resize right:-50:0
# shift + alt - 0x1E : yabai -m window --resize right:50:0

# alt - -
# alt - +
# alt - 0x18 : yabai -m window --resize top:0:-20
# alt - 0x1B : yabai -m window --resize top:0:20

# shift + alt - -
# shift + alt - +
# shift + alt - 0x18 : yabai -m window --resize bottom:0:20
# shift + alt - 0x1B : yabai -m window --resize bottom:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# meh - z : yabai -m window --toggle zoom-parent
# meh - m : yabai -m window --toggle zoom-fullscreen

# toggle window native fullscreen
meh - m : yabai -m window --toggle native-fullscreen

# toggle window split type (meh + .)
meh - 0x2F : yabai -m window --toggle split

# float / unfloat window and center on screen (meh + ,)
meh - 0x2B : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle padding and gap (meh + ;)
meh - 0x29 : yabai -m space --toggle padding; yabai -m space --toggle gap;

# toggle window border
# meh - b : yabai -m window --toggle border

# resize float window and put in center of the screen
# shift + alt - c : yabai -m window --grid 4:4:1:1:2:2

# resize float window to take full grid size
# shift + alt - z : yabai -m window --grid 1:1:0:0:1:1

# resize float window to take half left
# cmd + ctrl + alt - left : yabai -m window --grid 2:2:0:0:1:2
# resize float window to take half top
# cmd + ctrl + alt - up : yabai -m window --grid 2:2:0:0:2:1
# resize float window to take half down
# cmd + ctrl + alt - down : yabai -m window --grid 2:2:0:1:2:1
# resize float window to take half right
# cmd + ctrl + alt - right : yabai -m window --grid 2:2:1:0:1:2

# Rotate the window tree clock-wise (options: 90, 180, 270 degree)
# shift + alt - r : yabai -m space --rotate 270

# toggle whether the focused window should be shown on all spaces
# shift + alt - s : yabai -m window --toggle sticky
# toggle whether the focused window should be the topmost window
# shift + alt - t : yabai -m window --toggle topmost
