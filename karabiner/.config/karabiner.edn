{;; ----------------------------------
 ;; this is my goku file for karabiner
 ;; ----------------------------------
 ;; more info about goku: https://github.com/yqrashawn/GokuRakuJoudo
 ;; more info about karabiner: https://karabiner-elements.pqrs.org/docs
 ;; ----------------------------------
 ;; article karabiner god mode by nikita: https://medium.com/@nikitavoloboev/karabiner-god-mode-7407a5ddc8f6
 ;; examples: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#profiles-wip
 ;; tutorial: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md#basic8
 ;; another article: https://blog.jkl.gg/hacking-your-keyboard/
 ;; very well documented edn file by Kaushik Gopal: https://gist.github.com/kaushikgopal/ff7a92bbc887e59699c804b59074a126
 ;; key names: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj

 :profiles {:Goku {:default    true
                   :sim        50      ;; if keydown event for two different keys are pressed within :sim ms, the keypresses are considered simultaneous
                   :delay      500     ;; after :delay ms, the key press is considered to be delayed
                   :alone      150    ;; if keyup event comes within :alone ms from keydown, the key is not just pressed but held
                   :held       500     ;; key is fired twice when :held ms is elapsed (otherwise seen as a hold command)
}} ;; profiles

 ;; you can create templates for running shell commands. These follow clojure string template syntax.
 :templates {:echo "echo \"%s\""
             :open "open \"%s\""
             :open-app "open -a \"%s\""} ;; templates

 ; :modifiers {:meh [:left_control :left_option :left_shift]}
    ;; !  | means mandatory
    ;; #  | means optional
    ;; C  | left_command
    ;; T  | left_control
    ;; O  | left_option
    ;; S  | left_shift
    ;; F  | fn
    ;; Q  | right_command
    ;; W  | right_control
    ;; E  | right_option
    ;; R  | right_shift
    ;; P  | caps_lock
    ;; !! | mandatory command + control + optional + shift (hyper)
    ;; ## | optional any

 ;; layers are modifier keys
 :simlayers {;:f-mode {:key :f}    ; Deletion
             ;:space-mode {:key :spacebar} ; Extra Symbols
             ;:q-mode {:key :q}    ; Movement
             }

 ; the default value is 250
 :simlayer-threshold 200

 :froms {:mouse_upper {:pkey :button5}
         :mouse_lower {:pkey :button4}
         }

 ;; with tos you can predefine 'to' keypresses to easily parse them
 :tos {;; in order for OSX to register a caps lock press, it has to be held for a little under 100ms
       ; :toggle_caps {:key :caps_lock :hold_down_ms 100}
       ; :sleep {:ckey :eject :modi [:left_gui :left_alt]}
       ; :lock {:ckey :al_terminal_lock_or_screensaver}
       }

 ;; This is where you define the modifications
 :main [
        {:des "Change Caps Lock to Esc when tapped and Ctrl when held."
         :rules [[:##caps_lock           ;; FROM caps lock key with no or any modifiers
                  :left_control          ;; TO left control with optional modifiers
                  nil                    ;; with no conditionals
                  {:alone :escape}]]}

        {:des "Change Tab to Right Option when held."
         :rules [[:##tab
                  :right_option
                  nil
                  {:alone :tab}]]}

        {:des "Ctrl + Backspace to Option + Backspace."
         :rules [[:!Tdelete_or_backspace
                  :!Odelete_or_backspace
                  nil]]}

        {:des "Change Left Command to { when tapped."
         :rules [[:##left_command
                  :left_command
                  nil
                  {:alone :!Sopen_bracket}]]}

        {:des "Change Shifts to parentheses when tapped."
         :rules [[:##left_shift
                  :left_shift
                  nil
                  {:alone :!S9}]
                 [:##right_shift
                  :right_shift
                  nil
                  {:alone :!S0}]]}

        {:des "Change Right Command to } when tapped and Meh when held."
         :rules [[:##right_command
                  :!TOleft_shift
                  nil
                  {:alone :!Sclose_bracket}]]}

        {:des "Change Mouse Buttons to Meh when held."
         :rules [[:mouse_upper
                  :!TOleft_shift
                  nil
                  {:alone {:pkey :button5}}]
                 [:mouse_lower
                  :!TOleft_shift
                  nil
                  {:alone {:pkey :button4}}]]}

        {:des "Right Option to Navigation layer."
         :rules [[:!Eh :!Oleft_arrow nil]
                 [:!Ej :down_arrow nil]
                 [:!Ek :up_arrow nil]
                 [:!El :!Oright_arrow nil]
                 [:!Ep :left_arrow nil]
                 [:!En :right_arrow nil]
                 [:!Eu :!SOleft_arrow nil]
                 [:!Ei :!SOright_arrow nil]
                 [:!Em :page_down nil]
                 [:!Ecomma :page_up nil]
                 ]}

        ; {:des "q-mode for movement"
         ; :rules [:q-mode
                 ; ; modifiers
                 ; [:##w :left_shift]
                 ; [:##e :left_option]
                 ; ; arrows
                 ; [:##h :left_arrow]
                 ; [:##j :down_arrow]
                 ; [:##k :up_arrow]
                 ; [:##l :right_arrow]
                 ; ; other
                 ; [:##m :page_down]
                 ; [:##comma :page_up]
                ; ]
        ; }

        ; {:des "f-mode for deletion"
         ; :rules [:f-mode
                 ; [:h :delete_or_backspace]
                 ; [:j :!Odelete_or_backspace]
                 ; [:k :!Cdelete_or_backspace]
                ; ]
        ; }

        ; {:des "space-mode for symbols"
         ; :rules [:space-mode
                 ; [:q :!S1]
                 ; [:w :!S2]
                 ; [:e :!S3]
                 ; [:r :!S4]
                 ; [:t :!S5]
                 ; [:y :!S6]
                 ; [:u :!S7]
                 ; [:i :!S8]
                 ; [:a :1]
                 ; [:s :2]
                 ; [:d :3]
                 ; [:f :4]
                 ; [:g :5]
                 ; [:h :6]
                 ; [:j :7]
                 ; [:k :8]
                 ; [:l :9]
                 ; [:semicolon :0]
                 ; [:z :grave_accent_and_tilde]
                 ; [:x :!Sgrave_accent_and_tilde]
                 ; [:c :!Shyphen]
                 ; [:v :hyphen]
                 ; [:b :!CTq]
                 ; [:n :!Sequal_sign]
                 ; [:m :equal_sign]
                 ; [:comma :!Sbackslash]
                 ; [:period :backslash]
                ; ]
        ; }
        ]}
