{
 ;; ----------------------------------
 ;; this is my goku file for karabiner
 ;; ----------------------------------
 ;; more info about goku: https://github.com/yqrashawn/GokuRakuJoudo
 ;; more info about karabiner: https://karabiner-elements.pqrs.org/docs
 ;; ----------------------------------
 ;; article karabiner god mode by nikita: https://medium.com/@nikitavoloboev/karabiner-god-mode-7407a5ddc8f6
 ;; examples: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/examples.org#profiles-wip
 ;; tutorial: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/tutorial.md#basic8
 ;; another article: https://blog.jkl.gg/hacking-your-keyboard/
 ;; very well documented edn file by Kaushik Gopal: https://gist.github.com/kaushikgopal/ff7a92bbc887e59699c804b59074a126
 ;; key names: https://github.com/yqrashawn/GokuRakuJoudo/blob/master/src/karabiner_configurator/keys_info.clj

 :profiles {
            :Goku {
                   :default    true
                   :sim        50      ;; if keydown event for two different keys are pressed within :sim ms, the keypresses are considered simultaneous
                   :delay      500     ;; after :delay ms, the key press is considered to be delayed
                   :alone      150    ;; if keyup event comes within :alone ms from keydown, the key is not just pressed but held
                   :held       500     ;; key is fired twice when :held ms is elapsed (otherwise seen as a hold command)
                   }
            } ;; profiles

 ;; you can create templates for running shell commands. These follow clojure string template syntax.
 :templates {
             :echo "echo \"%s\""
             :open "open \"%s\""
             :open-app "open -a \"%s\""
             } ;; templates

 :modifiers {:meh [:left_control :left_option :left_shift]}

 ;; layers are modifier keys
 :simlayers {
             :f-mode {:key :f}    ; delimeters    ( ) [ ] { } and other symbols ~ $ &
             :d-mode {:key :d}    ; arithmetic    + - * / = % < > #
             :s-mode {:key :s}    ; punctuation   ? ! : ; ' " ` ~
             :a-mode {:key :a}    ; navigation hjkl + tab + enter + page down/up
             ;
             :q-mode {:key :q}    ; General shortcuts (browser etc.) - not settled
             :w-mode {:key :w}    ; Selection left and right (letter, word, line)
             :e-mode {:key :e}    ; Movement left and right (letter, word, line)
             :r-mode {:key :r}    ; Deletion left and right (letter, word, line)
             ;
             :g-mode {:key :g}    ; Mouse scroll, desktop left-right, zoom in-out, screenshot (not implemented)
             ;
             :v-mode {:key :v}    ; Number pad with + - BS ENTER as well
             :c-mode {:key :c}    ; Slashes and lines  ^ | \ _ @
             :x-mode {:key :x}    ; Some multi-character shortcuts like <= (not implemented)
             }

 ;; with tos you can predefine 'to' keypresses to easily parse them
 :tos {
       ;; in order for OSX to register a caps lock press, it has to be held for a little under 100ms
       :toggle_caps {:key :caps_lock :hold_down_ms 100}
       }
 ;; This is where you define the modifications
 :main [

        {
         :des "Change Caps Lock to Esc when tapped and Ctrl when held."
         :rules [
                 [
                  :##caps_lock           ;; FROM caps lock key with no or any modifiers
                  :left_control          ;; TO left control with optional modifiers
                  nil                    ;; with no conditionals
                  {:alone :escape}
                  ]
                 ]
         }
        {
         :des "Change Tab to Tab when tapped and Option when held."
         :rules [
                 [
                  :##tab
                  :left_option
                  nil
                  {:alone :tab}
                  ]
                 ]
         }
        {
         :des "Change Left Command to { when tapped and Left Command when held."
         :rules [
                 [
                  :##left_command
                  :left_command
                  nil
                  {:alone :!Sopen_bracket}
                  ]
                 ]
         }
        {
         :des "Change Right Command to } when tapped and Meh when held."
         :rules [
                 [
                  :##right_command
                  :!TOleft_shift
                  nil
                  {:alone :!Sclose_bracket}
                  ]
                 ]
         }
        {
         :des "Change Shifts to parentheses."
         :rules [
                 [
                  :##left_shift
                  :left_shift
                  nil
                  {:alone :!S9}
                  ]
                 [
                  :##right_shift
                  :!S0
                  nil
                  {:alone :right_shift}
                  ]
                 ]
         }


        ; ( ) !
        ; dn up `
        ; [ ] #
        {:des "f-mode for delimeters and ! ` #"
         :rules [:f-mode
                 [:##u :!S9]
                 [:##i :!S0]
                 [:##j :down_arrow]
                 [:##k :up_arrow]
                 [:##m :open_bracket]
                 [:##comma :close_bracket]
                 [:##o :!S1]
                 [:##l :grave_accent_and_tilde]
                 [:##period :!S3]
                ]
         }

        ;; # * -
        ;; ' " +
        ;; % ~ =
        {:des "d-mode for arithmetic and quotes"
         :rules [:d-mode
                  [:##u         :!S3]             ; d -> o        #
                  [:##i         :!S8]             ; d -> p        *
                  [:##o         :hyphen]          ; d -> o        -

                  [:##j         :quote]           ; d -> j        '
                  [:##k         :!Squote]         ; d -> k        "
                  [:##l         :!Sequal_sign]    ; d -> l        +

                  [:##m         :!S5]             ; d -> m        %
                  [:##comma     :!S3]             ; d -> ,
                  [:##period    :equal_sign]      ; d -> .        =
                ]
         }

        ;; ^ @ $
        ;; | & ?
        ;; \ _ /
        {:des "s-mode for dragon and @ $ &"
         :rules [:s-mode
                 [:##u :!S6]
                 [:##i :!S2]
                 [:##o :!S4]
                 [:##j :!Sbackslash]
                 [:##k :!S7]
                 [:##l :!Sslash]
                 [:##m :backslash]
                 [:##comma :!Shyphen]
                 [:##period :slash]
                ]
         }

        {:des "a-mode for hjkl movement and ,. PageDn/Up"
         :rules [:a-mode
                  [:##h :left_arrow]
                  [:##j :down_arrow]
                  [:##k :up_arrow]
                  [:##l :right_arrow]
                  [:##n :return_or_enter]
                  [:##m :page_down]
                  [:comma :page_up]
                ]
         }

        {:des "r-mode for deleting characters with ui, words with jk and lines with hl"
         :rules [:r-mode
                  [:##u :delete_or_backspace]   ; r -> u   Delete character backwards
                  [:##i :delete_forward]        ; r -> i   Delete character forwards
                  [:##j :!Odelete_or_backspace] ; r -> j   Delete word backwards
                  [:##k :!Odelete_forward]      ; r -> k   Delete word forwards
                  [:##h :!Cdelete_or_backspace] ; r -> h   Delete to beginning of line
                  [:##l :!Cdelete_forward]      ; r -> l   Delete to end of line
                  [:##m :delete_or_backspace]   ; r -> m   Delete character backwards
                  [:##comma :delete_forward]    ; r -> ,   Delete character forwards
                ]
         }

        {:des "e-mode allows for easy back and forth one character, word or line"
         :rules [:e-mode
                  [:##u         :left_arrow]          ; e -> u    Left
                  [:##i         :right_arrow]         ; e -> i    Right
                  [:##j         :!Oleft_arrow]        ; e -> j    Opt+Left
                  [:##k         :!Oright_arrow]       ; e -> k    Opt+Right
                  [:##h         :!Cleft_arrow]        ; e -> h    Cmd+Left
                  [:##l         :!Cright_arrow]       ; e -> l    Cmd+Right
                  [:##m         :left_arrow]          ; e -> m    Left
                  [:##comma     :right_arrow]         ; e -> ,    Right
                ]
         }

        {:des "w-mode = e-mode + SHIFT (i.e. selection, not just movement)"
         :rules [:w-mode
                  [:##u         :!Sleft_arrow]         ; w -> u    Shift+Left
                  [:##i         :!Sright_arrow]        ; w -> i    Shift+Right
                  [:##j         :!SOleft_arrow]        ; w -> j    Shift+Opt+Left
                  [:##k         :!SOright_arrow]       ; w -> k    Shift+Opt+Right
                  [:##h         :!SCleft_arrow]        ; w -> h    Shift+Cmd+Left
                  [:##l         :!SCright_arrow]       ; w -> l    Shift+Cmd+Right
                  [:##m         :!Sleft_arrow]         ; w -> m    Shift+Left
                  [:##comma     :!Sright_arrow]        ; w -> ,    Shift+Right
                ]
         }

        ; {:des "q-mode for general shortcuts like browser tab navigation"
         ; :rules [:q-mode
                  ; [:##j :!CSopen_bracket]  ; q -> j    tab to the left:  Cmd-{
                  ; [:##k :!CSclose_bracket] ; q -> k    tab to the right: Cmd-}
                  ; [:##l :!TCf           ]  ; q -> l    toggle full screen: ^âŒ˜F
                  ; [:##u :!Cclose_bracket]  ; q -> u    browser back:     Cmd-[
                  ; [:##i :!Cclose_bracket]  ; q -> i    browser forward:  Cmd-]
                  ; [:##o :f2             ]  ; q -> o    F2 (useful in Excel)
                  ; [:##p :f4             ]  ; q -> p    F4 (useful in Excel)
                ; ]
         ; }

        {:des "c-mode for number pad"
         :rules [:c-mode
                 [:u :7]
                 [:i :8]
                 [:o :9]
                 [:j :4]
                 [:k :5]
                 [:l :6]
                 [:m :1]
                 [:comma :2]
                 [:period :3]
                 [:spacebar :0]
                 [:p :!Sequal_sign]
                 [:semicolon :hyphen]
                 [:slash :return_or_enter]
                 [:y :delete_or_backspace]
                 [:h :period]
                 [:n :0]
                ]
        }

        ; {:des "c-mode for remaining symbols ^ | \\ _ @"
         ; :rules [:c-mode
                 ; [:##u :!S6]
                 ; [:##j :!Sbackslash]
                 ; [:##k :!S2]
                 ; [:##m :backslash]
                 ; [:##comma :!Shyphen]
                ; ]
        ; }



        ; {
         ; :des "launch mode: quick launch applications"
         ; :rules [
                 ; :launch-mode                                      ;; when open-mode is active (o is held)
                 ; [:t [:open-app "terminal"]]                   ;; and t is pressed, open Terminal
                 ; [:f [:open-app "finder"]]                     ;; and f is pressed, open Finder
                 ; [:d [:open "/users/anan/Desktop"]]         ;; and d is pressed, open the Desktop in finder
                 ; ]
         ; }
        ]
 }
